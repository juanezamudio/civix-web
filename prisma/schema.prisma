//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Category {
  id          String     @id() @default(uuid())
  name        String
  description String?
  events      Event[]    @relation("category")
  resources   Resource[] @relation("category")
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Location {
  id          String   @id() @default(uuid())
  name        String
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  latitude    Float?
  longitude   Float?
  events      Event[]  @relation("location")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Event {
  id          String      @id() @default(uuid())
  name        String
  description String?
  startDate   String?
  endDate     String?
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id], name: "category")
  locationId  String?
  location    Location?   @relation(fields: [locationId], references: [id], name: "location")
  userEvents  UserEvent[] @relation("event")
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Resource {
  id            String         @id() @default(uuid())
  name          String
  description   String?
  resourceUrl   String?
  categoryId    String?
  category      Category?      @relation(fields: [categoryId], references: [id], name: "category")
  userResources UserResource[] @relation("resource")
  dateCreated   DateTime       @default(now())
  dateUpdated   DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model UserEvent {
  id          String   @id() @default(uuid())
  status      String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  eventId     String?
  event       Event?   @relation(fields: [eventId], references: [id], name: "event")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model UserResource {
  id          String    @id() @default(uuid())
  accessDate  String?
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], name: "user")
  resourceId  String?
  resource    Resource? @relation(fields: [resourceId], references: [id], name: "resource")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ChatSession {
  id          String    @id() @default(uuid())
  startTime   String?
  endTime     String?
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], name: "user")
  messages    Message[] @relation("chatSession")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id            String       @id() @default(uuid())
  content       String?
  timestamp     String?
  isUserMessage Boolean?
  chatSessionId String?
  chatSession   ChatSession? @relation(fields: [chatSessionId], references: [id], name: "chatSession")
  dateCreated   DateTime     @default(now())
  dateUpdated   DateTime     @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id              String         @id() @default(uuid())
  name            String?
  email           String?        @unique()
  pictureUrl      String?        @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation String?
  emailVerified   Boolean?
  status          UserStatus     @default(VERIFIED)
  globalRole      String         @default("USER")
  /// @password
  /// @omit
  password        String?
  dateCreated     DateTime       @default(now())
  dateUpdated     DateTime       @default(now()) @updatedAt()
  accounts        Account[]
  sessions        Session[]
  userEvents      UserEvent[]    @relation("user")
  userResources   UserResource[] @relation("user")
  chatSessions    ChatSession[]  @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
